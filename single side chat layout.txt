public class MessageAdapter extends RecyclerView.Adapter<MessageAdapter.MessageViewHolder> {
    private List<Messages> messagesList;
        String uid="";
        DatabaseReference ref;
    @SuppressLint("WrongConstant")


    public MessageAdapter(List<Messages> messagesList,String uid) {
        this.messagesList = messagesList;
        this.uid = uid;
    }

    @NonNull
    @Override
    public MessageViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.message_single_layout_to,parent,false);

        ref = FirebaseDatabase.getInstance().getReference();
        return new MessageViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull final MessageViewHolder holder, int position) {
        final Messages c = messagesList.get(position);
        String userID = c.getFrom();
        final String type = c.getType();

            ref.child("users").child(uid).addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot snapshot) {
                    final String thumbnailImage = snapshot.child("thumbnail").getValue(String.class);

                    String name = snapshot.child("name").getValue(String.class);

                    Picasso.get().load(thumbnailImage).networkPolicy(NetworkPolicy.OFFLINE).placeholder(R.drawable.default_dp).into(holder.profileImage, new Callback() {
                        @Override
                        public void onSuccess() {

                        }

                        @Override
                        public void onError(Exception e) {
                            Picasso.get().load(thumbnailImage).placeholder(R.drawable.default_dp).into(holder.profileImage);
                        }
                    });
                    int indexOf = name.indexOf(" ");
                    name = name.substring(0,indexOf);
                    holder.nameText.setText(name);
                    holder.nameText.setTextColor(Color.BLACK);

                    if(type.equals("text")) {
                        holder.messageText.setTextColor(Color.BLACK);
                        holder.messageText.setText(c.getMessage());
                        holder.messageText.setVisibility(View.VISIBLE);
                        holder.imageView.setVisibility(View.INVISIBLE);
                        holder.imageView.setImageDrawable(null);
                    }else{
                        holder.messageText.setText("");
                        holder.messageText.setVisibility(View.INVISIBLE);
                        holder.imageView.setVisibility(View.VISIBLE);
                        Picasso.get().load(c.getMessage()).into(holder.imageView);

                    }
                }

                @Override
                public void onCancelled(@NonNull DatabaseError error) {

                }
            });

    }

    @Override
    public int getItemCount() {
        return messagesList.size();
    }

    public class MessageViewHolder extends RecyclerView.ViewHolder {
        public TextView messageText,nameText,timeText;
        public CircleImageView profileImage;
        public ImageView imageView;
        public MessageViewHolder(View view) {
            super(view);
            messageText = view.findViewById(R.id.chatUserTextMessage);
            profileImage = view.findViewById(R.id.chatUserdisplayPicture);
            nameText = view.findViewById(R.id.chatUserName);
            timeText = view.findViewById(R.id.chatTime);
            imageView = view.findViewById(R.id.imageMessage);
        }
    }
}
